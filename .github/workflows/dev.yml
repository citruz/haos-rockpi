# Home Assistant Operating System build workflow

name: Development build

on:
  workflow_dispatch:
  pull_request_target:
    types: [opened,synchronize,labeled]

jobs:
  prepare:
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'run-dev-build') }}
    name: Prepare build
    runs-on: [ "ubuntu-20.04" ]
    permissions:
      contents: read
      pull-requests: read
    outputs:
      version_main: ${{ steps.version_main.outputs.version_main }}
      version_dev: ${{ steps.version_dev.outputs.version_dev }}${{ steps.version_pr.outputs.version_pr }}
      matrix: ${{ steps.generate_matrix.outputs.result }}
    steps:
      - name: Generate Development build version
        shell: bash
        id: version_dev
        run: |
          version_dev="dev$(date --utc +'%Y%m%d')"
          echo "Development version \"${version_dev}\""
          echo "::set-output name=version_dev::${version_dev}"
      - name: Generate Development build version for PR
        if: ${{ github.event.pull_request }}
        shell: bash
        id: version_pr
        run: |
          version_pr=$(printf "%05d" ${{ github.event.pull_request.number }})
          echo "Development build for PR #${{ github.event.pull_request.number }}"
          echo "::set-output name=version_pr::${version_pr}"
      - uses: actions/checkout@v3
      - name: Get Major/Minor version
        id: version_main
        run: |
          major=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_MAJOR | cut -d'=' -f2)
          build=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_BUILD | cut -d'=' -f2)
          echo "::set-output name=version_main::${major}.${build}"
      - name: Create build matrix
        uses: actions/github-script@v6
        id: generate_matrix
        with:
          script: |
            const boards = require('./.github/workflows/matrix.json')

            if (context.eventName == "workflow_dispatch") {
              console.log("Run full build for all boards")
              return { "board": boards }
            }

            const labels = context.payload.pull_request.labels.map(l => l.name)
            const labelsSet = new Set(labels)
            const buildBoards = boards.filter(b => labelsSet.has(b.label))

            return { "board": buildBoards }

  build:
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'run-dev-build') }}
    name: Development build for ${{ matrix.board.id }}
    environment: "dev_build"
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    runs-on: ${{ matrix.board.runner }}

    steps:
      - name: Define git reference
        uses: actions/github-script@v6
        id: generate_gitref
        with:
          script: |
            if (context.eventName == "workflow_dispatch")
              return { "ref": context.ref }
            return { "ref": context.payload.pull_request.head.sha }

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: true
          persist-credentials: false
          ref: ${{ fromJSON(steps.generate_gitref.outputs.result).ref }}

      - name: Build container
        run: docker build -t haos-builder .

      - name: Build
        run: |
          BUILDER_UID="$(id -u)"
          BUILDER_GID="$(id -g)"
          docker run --rm --privileged -v "${GITHUB_WORKSPACE}:/build" \
            -e BUILDER_UID="${BUILDER_UID}" -e BUILDER_GID="${BUILDER_GID}" \
            -v "${{ matrix.board.runner }}-build-cache:/cache" \
            -v "/build/output" \
            haos-builder make BUILDDIR=/build VERSION_DEV=${{ needs.prepare.outputs.version_dev }} ${{ matrix.board.defconfig }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: haos-image
          path: release/haos_*.${{ needs.prepare.outputs.version_dev }}.img.xz
          if-no-files-found: error
